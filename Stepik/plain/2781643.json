{"reply": {"code": "#include <iostream>\n#include<vector>\n\nusing namespace std;\n\nvoid relax(vector<vector<pair<int, int>>>& graph,\n    vector<int>& dist, int vertex) {\n    for (int i = 0; i < graph[vertex].size(); ++i) {\n        int next_vertex = graph[vertex][i].first;\n        int d = graph[vertex][i].second;\n        if (dist[vertex] + d < dist[next_vertex]) {\n            dist[next_vertex] = dist[vertex] + d;\n        }\n    }\n}\n\nint main() {\n    int n, start, end;\n    cin >> n >> start >> end;\n    vector<vector<pair<int, int>>> graph(n * n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            int d;\n            cin >> d;\n            if (d > -1 && i != j) {\n                graph[i].push_back({ j, d });\n            }\n        }\n    }\n    start--;\n    end--;\n    vector<int> dist(n, INT16_MAX);\n    vector<int> used(n, 0);\n    used[start] = 1;\n    dist[start] = 0;\n\n    relax(graph, dist, start);\n    while (true) {\n        int min_dist = INT16_MAX;\n        int new_vertex = -1;\n        for (int i = 0; i < n; i++) {\n            if (used[i] == 0 && dist[i] < min_dist) {\n                min_dist = dist[i];\n                new_vertex = i;\n            }\n        }\n\n        if (new_vertex == -1) break;\n\n        relax(graph, dist, new_vertex);\n        used[new_vertex] = 1;\n    }\n\n    int d = dist[end];\n    if (d == INT16_MAX) {\n        cout << -1;\n        return 0;\n    }\n    cout << d;\n    \n}", "language": "c++20"}}