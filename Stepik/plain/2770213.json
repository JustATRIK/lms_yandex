{"reply": {"code": "use std::{io, vec};\n\nfn main() {\n    let mut stack: Vec<i32> = vec![];\n    let mut inp: String = input();\n    while inp != \"exit\" {\n        if inp.contains(\"push\") {\n            let val: i32 = inp.split(\" \").collect::<Vec<&str>>()[1].parse().unwrap();\n            stack.push(val);\n            println!(\"ok\");\n        } else {\n            match inp.as_str() {\n                \"pop\" => println!(\"{}\", stack.pop().expect(\"null\")),\n                \"back\" => println!(\"{}\", stack.last().expect(\"null\")),\n                \"size\" => println!(\"{}\", stack.len()),\n                \"clear\" => {\n                    stack.clear();\n                    println!(\"ok\");\n                },\n                &_ => println!(\"null\")\n            }\n        }\n        inp = input();\n    }\n    println!(\"bye\");\n}\n\n\nfn input() -> String {\n    let mut inp = String::new();\n    io::stdin().read_line(&mut inp);\n    inp.trim().to_string()\n}", "language": "rust"}}