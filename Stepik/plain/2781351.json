{"reply": {"code": "#include <iostream>\n#include<vector>\n\nusing namespace std;\n\n\nint main() {\n    int n, start, end;\n    cin >> n;\n    vector<vector<int>> graph(n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            int d;\n            cin >> d;\n            if (d == 1) {\n                graph[i].push_back(j);\n            }\n        }\n    }\n    cin >> start >> end;\n    if (start == end) {\n        cout << 0;\n        return 0;\n    }\n    start--;\n    end--;\n    vector<vector<int>> layers;\n    vector<int> used(n, -1);\n    used[start] = 1;\n    layers.push_back({ start });\n\n    int current_distance = 0;\n    while (!layers[current_distance].empty()) {\n        layers.emplace_back();\n        for (int i = 0; i < layers[current_distance].size(); ++i) {\n            int current_vertex = layers[current_distance][i];\n            for (int j = 0; j < graph[current_vertex].size(); ++j) {\n                int next_vertex = graph[current_vertex][j];\n                if (used[next_vertex] == -1) {\n                    layers[current_distance + 1].push_back(next_vertex);\n                    used[next_vertex] = current_distance + 1;\n                }\n            }\n        }\n        ++current_distance;\n    }\n\n    cout << used[end];\n}", "language": "c++20"}}